import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'
import { NextRequest, NextResponse } from 'next/server'

const isOnboardingRoute = createRouteMatcher(['/onboarding'])
const isPublicRoute = createRouteMatcher(['/sign-in(.*)', '/sign-up(.*)', '/api/webhooks(.*)', '/api/user/sync', '/api/user/update-metadata'])

export default clerkMiddleware(async (auth, req: NextRequest) => {
  const { userId, sessionClaims, redirectToSignIn } = await auth()

  // Debug logging for dashboard access issues
  if (req.nextUrl.pathname.startsWith('/dashboard')) {
    console.log('üîç Middleware Debug - Dashboard Access:', {
      url: req.url,
      userId,
      hasSessionClaims: !!sessionClaims,
      metadata: sessionClaims?.metadata,
      app_metadata: sessionClaims?.app_metadata,
      onboardingComplete: sessionClaims?.metadata?.onboardingComplete || sessionClaims?.app_metadata?.onboardingComplete,
      isOnboardingRoute: isOnboardingRoute(req),
      isPublicRoute: isPublicRoute(req)
    })
  }

  // For users visiting /onboarding, don't try to redirect
  if (userId && isOnboardingRoute(req)) {
    console.log('‚úÖ Allowing access to onboarding route')
    return NextResponse.next()
  }

  // If the user isn't signed in and the route is private, redirect to sign-in
  if (!userId && !isPublicRoute(req)) {
    console.log('üö´ No user ID, redirecting to sign-in')
    return redirectToSignIn({ returnBackUrl: req.url })
  }

  // Check onboarding status from either metadata or app_metadata location
  const onboardingComplete = sessionClaims?.metadata?.onboardingComplete || sessionClaims?.app_metadata?.onboardingComplete
  
  // Catch users who do not have `onboardingComplete: true` in their publicMetadata
  // Redirect them to the /onboarding route to complete onboarding  
  if (userId && !onboardingComplete && !isOnboardingRoute(req) && !isPublicRoute(req)) {
    console.log('üîÑ Onboarding not complete, redirecting to onboarding:', {
      onboardingComplete,
      metadata: sessionClaims?.metadata,
      app_metadata: sessionClaims?.app_metadata,
      fullSessionClaims: sessionClaims
    })
    const onboardingUrl = new URL('/onboarding', req.url)
    return NextResponse.redirect(onboardingUrl)
  }

  // If the user is logged in and the route is protected, let them view.
  if (userId && !isPublicRoute(req)) {
    console.log('‚úÖ User authenticated and onboarding complete, allowing access')
    return NextResponse.next()
  }
})

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
}